@use "sass:math";
@use "flex" as flex;

// --------------------------------------------------
// Global SCSS mixins
// --------------------------------------------------

@mixin font-generate($font-family,
  $fontSize,
  $weight: normal,
  $lineHeight: 1,
  $letterSpacing: normal,
  $fontSizeMin: null,
  $lineHeightMin: null,
  $fontSizeMax: null,
  $lineHeightMax: null
)
{
  font-family: $font-family;
  speak: never;
  font-style: normal;
  font-variant: normal;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  font-weight: $weight;
  letter-spacing: $letterSpacing;
  @if $fontSizeMin == null and $fontSizeMax == null {
    font-size: $fontSize;
  } @else if $fontSizeMax == null {
    font-size: clamp($fontSizeMin, $fontSize, $fontSize);
  } @else if $fontSizeMin == null {
    font-size: clamp($fontSize, $fontSize, $fontSizeMax);
  } @else {
    font-size: clamp($fontSizeMin, $fontSize, $fontSizeMax);
  }

  @if $lineHeightMin == null and $lineHeightMax == null {
    line-height: $lineHeight;
  } @else if $lineHeightMax == null {
    line-height: clamp($lineHeightMin, $lineHeight, $lineHeight);
  } @else if $lineHeightMin == null {
    line-height: clamp($lineHeight, $lineHeight, $lineHeightMax);
  } @else {
    line-height: clamp($lineHeightMin, $lineHeight, $lineHeightMax);
  }
}

@mixin transition-default($types: all, $time: 300ms, $courbe: cubic-bezier(0.65, 0, 0.35, 1)){
  -webkit-transition: $types $time $courbe;
  -moz-transition: $types $time $courbe;
  -ms-transition: $types $time $courbe;
  -o-transition: $types $time $courbe;
  transition: $types $time $courbe;
}
@mixin transition-delay($delay...) {
  -moz-transition-delay:    $delay;
  -o-transition-delay:      $delay;
  -webkit-transition-delay: $delay;
  transition-delay:         $delay;
}
@mixin transition-transform($transition) {
  -webkit-transition: -webkit-transform $transition;
  -moz-transition: -moz-transform $transition;
  -o-transition: -o-transform $transition;
  transition: transform $transition;
}
@mixin transform-translate($height,$width){
  transform: translate($height,$width);
  -webkit-transform: translate($height,$width);
  -moz-transform: translate($height,$width);
  -o-transform: translate($height,$width);
  -ms-transform: translate($height,$width);
}

@mixin transform($expression){
  transform: $expression;
  -webkit-transform: $expression;
  -moz-transform: $expression;
  -o-transform: $expression;
  -ms-transform: $expression;
}

@mixin position-disabled()
{
  top:auto;
  left:auto;
  right:auto;
  bottom:auto;
  transform: translate(0, 0);
  -webkit-transform: translate(0, 0);
  -moz-transform: translate(0, 0);
  -o-transform: translate(0, 0);
  -ms-transform: translate(0, 0);
}
@mixin position-middle()
{
  top:50%;
  left:50%;
  transform: translate(-50%, -50%);
  -webkit-transform: translate(-50%, -50%);
  -moz-transform: translate(-50%, -50%);
  -o-transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);
}
@mixin position-middle-y()
{
  top:50%;
  transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
}
@mixin position-middle-x()
{
  left:50%;
  transform: translateX(-50%);
  -webkit-transform: translateX(-50%);
  -moz-transform: translateX(-50%);
  -o-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
}

@mixin radius($radius){
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
  -moz-transform: rotate($degrees);
  -o-transform: rotate($degrees);
  -ms-transform: rotate($degrees); // IE9 only
  transform: rotate($degrees);
}
@mixin scale($ratio, $ratio-y) {
  -webkit-transform: scale($ratio, $ratio-y);
  -moz-transform: scale($ratio, $ratio-y);
  -o-transform: scale($ratio, $ratio-y);
  -ms-transform: scale($ratio, $ratio-y); // IE9 only
  transform: scale($ratio, $ratio-y);
}
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
  -moz-transform: translate($x, $y);
  -o-transform: translate($x, $y);
  -ms-transform: translate($x, $y); // IE9 only
  transform: translate($x, $y);
}
@mixin skew($x, $y) {
  -webkit-transform: skew($x, $y);
  -moz-transform: skew($x, $y);
  -o-transform: skew($x, $y);
  -ms-transform: skew($x, $y); // IE9 only
  transform: skew($x, $y);
}
@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
  -moz-transform: translate3d($x, $y, $z);
  -o-transform: translate3d($x, $y, $z);
  -ms-transform: translate3d($x, $y, $z); // IE9 only
  transform: translate3d($x, $y, $z);
}

@mixin rotate-x($degrees) {
  -webkit-transform: rotateX($degrees);
  -moz-transform: rotateX($degrees);
  -o-transform: rotateX($degrees);
  -ms-transform: rotateX($degrees); // IE9 only
  transform: rotateX($degrees);
}
@mixin rotate-y($degrees) {
  -webkit-transform: rotateY($degrees);
  -moz-transform: rotateY($degrees);
  -o-transform: rotateY($degrees);
  -ms-transform: rotateY($degrees); // IE9 only
  transform: rotateY($degrees);
}
@mixin perspective($perspective) {
  -webkit-transform: $perspective;
  -moz-transform: $perspective;
  -o-transform: $perspective;
  -ms-transform: $perspective; // IE9 only
  transform: $perspective;
}
@mixin perspective-origin($perspective) {
  -webkit-transform: $perspective;
  -moz-transform: $perspective;
  -o-transform: $perspective;
  -ms-transform: $perspective; // IE9 only
  transform: $perspective;
}
@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin; // IE9 only
  transform-origin: $origin;
}
@mixin transform-expression($expression){
  -webkit-transform: $expression;
  -moz-transform: $expression;
  -o-transform: $expression;
  -ms-transform: $expression; // IE9 only
  transform: $expression;
}
@mixin image-cover($objectFit: contain) {
  height: 100%;
  width: 100%;
  object-fit: $objectFit;
  display: block;
  object-position: 50% 50%;
}
@mixin picture-cover($objectFit: contain) {
  @include flex.display();
  height: 100%;
  width: 100%;
  img {
    @include image-cover($objectFit);
  }
}
@mixin box-shadow($x, $y, $blur, $spread, $color, $inset...) {
  -moz-box-shadow: $inset $x $y $blur $spread $color;
  -webkit-box-shadow: $inset $x $y $blur $spread $color;
  -o-box-shadow: $inset $x $y $blur $spread $color;
  box-shadow: $inset $x $y $blur $spread $color;
  filter:progid:DXImageTransform.Microsoft.Shadow($color, Direction=NaN, Strength=$spread);
}
@mixin box-shadow-arguments($arguments) {
  -moz-box-shadow: #{$arguments};
  -webkit-box-shadow: #{$arguments};
  -o-box-shadow: #{$arguments};
  box-shadow: #{$arguments};
}
@mixin box-sizing($boxSizing: border-box) {
  -webkit-box-sizing: $boxSizing;
  -moz-box-sizing: $boxSizing;
  box-sizing: $boxSizing;
}

@mixin appearance($arguments){
  appearance: $arguments;
  -webkit-appearance: $arguments;
  -moz-appearance: $arguments;
}
@mixin animation($arguments) {
  -webkit-animation: $arguments;
  -moz-animation: $arguments;
  animation: $arguments;
}

@mixin font-size($sizeValue)
{
  $pxValue: $sizeValue;
  $remValue: math.div($sizeValue, 10);
  font-size: #{$pxValue}px;
  font-size: #{$remValue}rem;
}

@mixin unit-dvh($property, $value) {
  #{$property}: #{$value}vh;
  #{$property}: #{$value}dvh;
}
@mixin unit-lvh($property, $value) {
  #{$property}: #{$value}vh;
  #{$property}: #{$value}lvh;
}
@mixin unit-svh($property, $value) {
  #{$property}: #{$value}vh;
  #{$property}: #{$value}lvh;
}

@mixin truncate-lines($nbLine) {
  display: -webkit-box;
  display: -moz-box;
  -webkit-line-clamp: $nbLine;
  -moz-line-clamp: $nbLine;
  line-clamp: $nbLine;
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  box-orient: vertical;
  overflow: hidden;
}

